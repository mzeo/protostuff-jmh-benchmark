// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from test.proto

package se.mzlair.protostuffbenchmark.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

public final class TestMessage implements Externalizable, Message<TestMessage>, Schema<TestMessage>
{

    public static Schema<TestMessage> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TestMessage getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TestMessage DEFAULT_INSTANCE = new TestMessage();

    
    private List<Integer> packedInt32s;
    private List<Integer> unpackedInt32s;

    public TestMessage()
    {

    }

    @Override
    public String toString() {
        return "TestMessage{" +
                    "packedInt32s=" + packedInt32s +
                    ", unpackedInt32s=" + unpackedInt32s +
                '}';
    }
    // getters and setters

    // packedInt32s

    public List<Integer> getPackedInt32sList()
    {
        return packedInt32s;
    }


    public TestMessage setPackedInt32sList(List<Integer> packedInt32s)
    {
        this.packedInt32s = packedInt32s;
        return this;
    }

    public Integer getPackedInt32s(int index)
    {
        return packedInt32s == null ? null : packedInt32s.get(index);
    }

    public int getPackedInt32sCount()
    {
        return packedInt32s == null ? 0 : packedInt32s.size();
    }

    public TestMessage addPackedInt32s(Integer packedInt32s)
    {
        if(this.packedInt32s == null)
            this.packedInt32s = new ArrayList<Integer>();
        this.packedInt32s.add(packedInt32s);
        return this;
    }

    // unpackedInt32s

    public List<Integer> getUnpackedInt32sList()
    {
        return unpackedInt32s;
    }


    public TestMessage setUnpackedInt32sList(List<Integer> unpackedInt32s)
    {
        this.unpackedInt32s = unpackedInt32s;
        return this;
    }

    public Integer getUnpackedInt32s(int index)
    {
        return unpackedInt32s == null ? null : unpackedInt32s.get(index);
    }

    public int getUnpackedInt32sCount()
    {
        return unpackedInt32s == null ? 0 : unpackedInt32s.size();
    }

    public TestMessage addUnpackedInt32s(Integer unpackedInt32s)
    {
        if(this.unpackedInt32s == null)
            this.unpackedInt32s = new ArrayList<Integer>();
        this.unpackedInt32s.add(unpackedInt32s);
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TestMessage> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TestMessage newMessage()
    {
        return new TestMessage();
    }

    public Class<TestMessage> typeClass()
    {
        return TestMessage.class;
    }

    public String messageName()
    {
        return TestMessage.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TestMessage.class.getName();
    }

    public boolean isInitialized(TestMessage message)
    {
        return true;
    }

    public void mergeFrom(Input input, TestMessage message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.packedInt32s == null)
                        message.packedInt32s = new ArrayList<Integer>();
                    message.packedInt32s.add(input.readInt32());break;
                case 2:
                    if(message.unpackedInt32s == null)
                        message.unpackedInt32s = new ArrayList<Integer>();
                    message.unpackedInt32s.add(input.readInt32());break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
        } finally {
        if (message.packedInt32s != null)
            message.packedInt32s = java.util.Collections.unmodifiableList(message.packedInt32s);
        else
            message.packedInt32s = java.util.Collections.emptyList();
        if (message.unpackedInt32s != null)
            message.unpackedInt32s = java.util.Collections.unmodifiableList(message.unpackedInt32s);
        else
            message.unpackedInt32s = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, TestMessage message) throws IOException
    {
        if(message.packedInt32s != null)
        {
            for(Integer packedInt32s : message.packedInt32s)
            {
                if(packedInt32s != null)
                    output.writeInt32(1, packedInt32s, true);
            }
        }

        if(message.unpackedInt32s != null)
        {
            for(Integer unpackedInt32s : message.unpackedInt32s)
            {
                if(unpackedInt32s != null)
                    output.writeInt32(2, unpackedInt32s, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "packedInt32s";
            case 2: return "unpackedInt32s";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("packedInt32s", 1);
        __fieldMap.put("unpackedInt32s", 2);
    }
    
}
